{"version":3,"sources":["../src/index.js"],"names":["fs","require","path","gitLabel","labels","readFiles","dirname","Promise","resolve","reject","result","filesNames","readdirSync","forEach","filename","contents","readFileSync","join","push","JSON","parse","error","gitLabels","repo","token","Error","response","__dirname","then","results","map","d","l","config","api","remove","removeResponse","add","addResponse","catch"],"mappings":";;;;;AAAA,IAAMA,KAAMC,QAAQ,IAAR,CAAZ;AACA,IAAMC,OAAQD,QAAQ,MAAR,CAAd;AACA,IAAME,WAAWF,QAAQ,WAAR,CAAjB;;AAEA,IAAIG,SAAS,EAAb;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMC,SAAS,EAAf;AACA,UAAMC,aAAaX,GAAGY,WAAH,CAAeN,OAAf,CAAnB;;AAEAK,iBAAWE,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC/B,YAAMC,WAAWf,GAAGgB,YAAH,CAAgBd,KAAKe,IAAL,CAAUX,OAAV,EAAmBQ,QAAnB,CAAhB,EAA8C,MAA9C,CAAjB;;AAEAJ,eAAOQ,IAAP,CAAY,EAAEJ,kBAAF,EAAYC,UAAUI,KAAKC,KAAL,CAAWL,QAAX,CAAtB,EAAZ;AACD,OAJD;;AAMA,aAAOP,QAAQE,MAAR,CAAP;AACD,KAXD,CAYA,OAAOW,KAAP,EAAc;AACZ,aAAOZ,OAAOY,KAAP,CAAP;AACD;AACF,GAhBM,CAAP;AAiBD;;AAED,IAAMC,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,KAAP,EAAiB;AACjC,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,MAAI,CAACD,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,SAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIiB,WAAW,EAAf;;AAEArB,cAAUH,KAAKe,IAAL,CAAUU,SAAV,EAAqB,IAArB,EAA2B,SAA3B,CAAV,EACGC,IADH,CACQ,mBAAW;AACfC,cAAQC,GAAR,CAAY,aAAK;AACfC,UAAEhB,QAAF,CAAWF,OAAX,CAAmB,aAAK;AACtBT,iBAAOc,IAAP,CAAYc,CAAZ;AACD,SAFD;AAGD,OAJD;;AAMA,aAAO5B,MAAP;AACD,KATH,EAUGwB,IAVH,CAUQ,kBAAU;AACd,UAAMK,SAAS;AACbC,aAAK,wBADQ;AAEbX,kBAFa;AAGbC;AAHa,OAAf;;AAMA,UAAI;AACFrB,iBAASgC,MAAT,CAAgBF,MAAhB,EAAwB7B,MAAxB,EACGwB,IADH,CACQ,0BAAkB;AACtBF,mBAASR,IAAT,CAAckB,cAAd;;AAEAjC,mBAASkC,GAAT,CAAaJ,MAAb,EAAqB7B,MAArB,EACGwB,IADH,CACQ,uBAAe;AACnBF,qBAASR,IAAT,CAAcoB,WAAd;;AAEA,mBAAO9B,QAAQkB,QAAR,CAAP;AACD,WALH;AAMD,SAVH;AAWD,OAZD,CAaA,OAAOL,KAAP,EAAc;AACZ,eAAOZ,OAAOY,KAAP,CAAP;AACD;AACF,KAjCH,EAkCGkB,KAlCH,CAkCS,iBAAS;AACd,aAAO9B,OAAOY,KAAP,CAAP;AACD,KApCH;AAqCD,GAxCM,CAAP;AAyCD,CAlDD;;kBAoDeC,S","file":"index.js","sourcesContent":["const fs  = require('fs');\nconst path  = require('path');\nconst gitLabel = require('git-label');\n\nlet labels = [];\n\nfunction readFiles(dirname) {\n  return new Promise((resolve, reject) => {\n    try {\n      const result = [];\n      const filesNames = fs.readdirSync(dirname);\n\n      filesNames.forEach((filename) => {\n        const contents = fs.readFileSync(path.join(dirname, filename), 'utf8');\n\n        result.push({ filename, contents: JSON.parse(contents) });\n      });\n\n      return resolve(result);\n    }\n    catch (error) {\n      return reject(error);\n    }\n  });\n}\n\nconst gitLabels = (repo, token) => {\n  if (!repo) {\n    throw new Error('`repo` is required');\n  }\n\n  if (!token) {\n    throw new Error('`token` is required');\n  }\n\n  return new Promise((resolve, reject) => {\n    let response = [];\n\n    readFiles(path.join(__dirname, '..', 'labels/'))\n      .then(results => {\n        results.map(d => {\n          d.contents.forEach(l => {\n            labels.push(l);\n          });\n        });\n\n        return labels;\n      })\n      .then(labels => {\n        const config = {\n          api: 'https://api.github.com',\n          repo,\n          token\n        };\n\n        try {\n          gitLabel.remove(config, labels)\n            .then(removeResponse => {\n              response.push(removeResponse);\n\n              gitLabel.add(config, labels)\n                .then(addResponse => {\n                  response.push(addResponse);\n\n                  return resolve(response);\n                })\n            });\n        }\n        catch (error) {\n          return reject(error);\n        }\n      })\n      .catch(error => {\n        return reject(error);\n      });\n  });\n};\n\nexport default gitLabels;\n"]}